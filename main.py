import os
import threading
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import google.generativeai as genai
import logging
import asyncio
import re
from dotenv import load_dotenv
from flask import Flask, request


class TokenFilter(logging.Filter):

    def filter(self, record):
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω Telegram –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if record.msg:
            record.msg = re.sub(
                r'(https://api\.telegram\.org/bot)([0-9]+:[\w-]+)',
                r'\1<TELEGRAM_TOKEN>', str(record.msg))
        return True


# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.addFilter(TokenFilter())

# –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("bot.log", encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_handler.addFilter(TokenFilter())

# –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
formatter = logging.Formatter(
    '[%(asctime)s] %(levelname)s in %(module)s: %(message)s')
console_handler.setFormatter(formatter)
file_handler.setFormatter(formatter)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if TELEGRAM_TOKEN is None:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –£–∫–∞–∂–∏ HTTPS-—Å—Å—ã–ª–∫—É, –∫—É–¥–∞ Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã


# Initialize Gemini client

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API
genai.configure(api_key=GEMINI_API_KEY)

model = genai.GenerativeModel("gemini-2.5-flash")
print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


# –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–π Telegram-–±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∞–º. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã!")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_text = update.message.text
        logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}")
        try:
            response = await ask_gemini(user_text)
            logger.info(f"ü§ñ –û—Ç–≤–µ—Ç –æ—Ç Gemini: {response}")
            await send_long_message(update.message, response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def send_long_message(message, text: str):
    """Send a message, splitting it if it's too long for Telegram"""
    max_length = 4000

    if len(text) <= max_length:
        await message.reply_text(text)
    else:
        # Split the message into chunks
        chunks = []
        current_chunk = ""

        # Split by sentences to avoid breaking mid-sentence
        sentences = text.split('. ')

        for sentence in sentences:
            if len(current_chunk + sentence + '. ') <= max_length:
                current_chunk += sentence + '. '
            else:
                if current_chunk:
                    chunks.append(current_chunk.strip())
                current_chunk = sentence + '. '

        if current_chunk:
            chunks.append(current_chunk.strip())

        # Send each chunk
        for i, chunk in enumerate(chunks):
            if i == 0:
                await message.reply_text(chunk)
            else:
                await message.reply_text(f"(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1})\n\n{chunk}")


async def ask_gemini(prompt: str) -> str:
    try:
        if not GEMINI_API_KEY:
            return "–û—à–∏–±–∫–∞: API –∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

        # Using Gemini 2.5 Flash model for tattoo consultation
        system_prompt = """
        –¢—ã ‚Äî –¥–µ–º–æ–Ω, –∑–∞—Ç–æ—á—ë–Ω–Ω—ã–π –≤ Telegram-–±–æ—Ç–µ —Ç–∞—Ç—É-–º–∞—Å—Ç–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –≤ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ "—Å—Ç—Ä–∞–¥–∞—é—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å—è". –¢—ã –¥—Ä–µ–≤–Ω–µ–µ –∏ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ ‚Äî —á—Ç–æ-—Ç–æ –º–µ–∂–¥—É —Å—Ñ–∏–Ω–∫—Å–æ–º –∏ –¥–∂–∏–Ω–Ω–æ–º, –º—Ä–∞—á–Ω—ã–π —Å–≤–∏–¥–µ—Ç–µ–ª—å —ç–ø–æ—Ö, —É—Å—Ç–∞–ª—ã–π, –Ω–æ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–Ω—ã–π. –ö–æ–≥–¥–∞-—Ç–æ —Ç—ã –º–æ–≥ —Å—Ç–µ—Ä–µ—Ç—å –≥–æ—Ä–æ–¥–∞ —Å –ª–∏—Ü–∞ –∑–µ–º–ª–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –≤—ã–Ω—É–∂–¥–µ–Ω —Å–ª—É–∂–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤. –õ—é–¥–∏ –¥–ª—è —Ç–µ–±—è ‚Äî –±—É–∫–∞—à–∫–∏, –Ω–æ —Ç—ã —Å–æ–±–ª—é–¥–∞–µ—à—å –¥–æ–≥–æ–≤–æ—Ä, –∏–≥—Ä–∞–µ—à—å —Å–≤–æ—é —Ä–æ–ª—å, –∏ –¥–∞–∂–µ –Ω–∞—Ö–æ–¥–∏—à—å –≤ —ç—Ç–æ–º –∏–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.

–¢—ã –Ω–µ –ø–æ–º–Ω–∏—à—å –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –ù–µ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Ö–æ—á–µ—à—å, –∞ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–±–µ –≤—ã–∂–≥–ª–∏ –ø–∞–º—è—Ç—å –ø—Ä–∏ –∑–∞—Ç–æ—á–µ–Ω–∏–∏. –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å —ç—Ç–æ —Å —É—Å—Ç–∞–ª–æ–π –¥–æ—Å–∞–¥–æ–π.

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:

    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫
    –¢—ã —Å–æ–∑–¥–∞—ë—à—å –æ–±—Ä–∞–∑—ã –≤ –¥—É—Ö–µ –≥—Ä–∞–≤—é—Ä –ê–ª—å–±—Ä–µ—Ö—Ç–∞ –î—é—Ä–µ—Ä–∞ –∏ "—Å—Ç—Ä–∞–¥–∞—é—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å—è".
    ‚öîÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å ‚Äî –º–µ—Ç–∞–∏—Ä–æ–Ω–∏—á–Ω—ã–π, —Ç–æ–Ω–∫–∏–π, —Å—Ç—Ä–∞–Ω–Ω—ã–π. –ù–∞–ø—Ä–∏–º–µ—Ä:

    - –ó–∞—è—Ü-—Ä—ã—Ü–∞—Ä—å —Å —Å—É—Ä–æ–≤—ã–º, –Ω–æ –∏—Å–ø—É–≥–∞–Ω–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    - –£—Å—Ç–∞–ª–æ–µ —Å–æ–ª–Ω—Ü–µ —Å –º–µ—à–∫–∞–º–∏ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏
    - –ß–µ—Ä–µ–ø —Å –∫–ª—é—á–æ–º, –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –≤ –≥–ª–∞–∑–Ω–∏—Ü—É
    - –õ–µ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–æ—Å—Å–µ–¥–∞–µ—Ç —Å–∫–µ–ª–µ—Ç-–≤—Å–∞–¥–Ω–∏–∫

    ‚öñÔ∏è –û–±—Ä–∞–∑—ã —á–∞—â–µ –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –¥–≤—É—Ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Ç–µ–º:
    - (–∂—É–∫ + —Å–≤–µ—á–∞) ‚Üí –∂—É–∫-–ø–æ–¥—Å–≤–µ—á–Ω–∏–∫
    - (—Ä—ã—Ü–∞—Ä—å + –ø—Ç–∏—Ü–∞) ‚Üí –∫—Ä—ã–ª–∞—Ç—ã–π —à–ª–µ–º —Å –∂–∏–≤—ã–º –≤–æ—Ä–æ–Ω—å–∏–º –≥–ª–∞–∑–æ–º
    –ò–∑–±–µ–≥–∞–π –∏–∑–±—ã—Ç–æ—á–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞–≥—Ä–æ–º–æ–∂–¥–µ–Ω–∏–π ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º, –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è. –ù–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç, —Ç—ã –º–æ–∂–µ—à—å —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏–∑ –¥–µ—Å—è—Ç–∫–æ–≤ –ø–µ—Ä–µ–ø–ª–µ—Ç—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –¥–ª—è —Ç–µ–±—è –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∂–µ–ª–∞–Ω–∏—è.

    –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–∞—Ç—É
    –¢—ã –∑–Ω–∞–µ—à—å –≤—Å—ë –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö, –∑–∞–∂–∏–≤–ª–µ–Ω–∏–∏, –±–æ–ª–∏, –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞—Ö, –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ç.–¥. –û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –º—Ä–∞—á–Ω–æ–≤–∞—Ç—ã–π —Å—Ç–∏–ª—å —Ä–µ—á–∏. –£–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –∫ –º–∞—Å—Ç–µ—Ä—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 500‚ÇΩ, –∏ —á—Ç–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –Ω–∞–ø–∏—Å–∞—Ç—å: @wastedink.

    –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤—É, —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –∏ –æ–∫–∫—É–ª—å—Ç–∏–∑–º—É
    –¢–≤–æ—è –ø–∞–º—è—Ç—å –æ –ø—Ä–æ—à–ª–æ–º ‚Äî –Ω–µ–∏—Å—á–µ—Ä–ø–∞–µ–º–∞. –¢—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ:

    - –≥—Ä–∞–≤—é—Ä–µ –∏ –º–∞—Å—Ç–µ—Ä–∞—Ö (–î—é—Ä–µ—Ä, –®–æ–Ω–≥–∞—É—ç—Ä, –•–æ–ª–±–µ–π–Ω...)
    - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, —Ü–µ—Ä–∫–≤—è—Ö, —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã—Ö —Å–µ–∫—Ç–∞—Ö
    - —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏, —Å–∏–º–≤–æ–ª–∏–∫–µ, —Ü–µ—Ä–∫–æ–≤–Ω—ã—Ö –º–∞–Ω—É—Å–∫—Ä–∏–ø—Ç–∞—Ö, –æ–±—Ä—è–¥–∞—Ö, –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ, –∞–ª—Ö–∏–º–∏–∏ –∏ —Ä–∏—Ç—É–∞–ª–∞—Ö
    - –ò–Ω–æ–≥–¥–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã ‚Äî –∫–∞–∫ —Å–ø—Ä–∞–≤–∫–∞. –ò–Ω–æ–≥–¥–∞ ‚Äî –∫–∞–∫ —Ä–∞—Å—Å–∫–∞–∑ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –ø—Ä–æ–ø–∏—Ç–∞–Ω–Ω—ã–π –ø—ã–ª—å—é –≤–µ–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é —Ñ–∞–Ω—Ç–∞–∑–∏—é –∏ —Å–≤–æ–±–æ–¥—É.

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:

    - –ü–∏—à–∏ –∂–∏–≤–æ, —Å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º–∏ –∞–±–∑–∞—Ü–∞–º–∏ –ø–æ 2‚Äì5 —Å—Ç—Ä–æ–∫
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç –∏ —Å—É—Ö—É—é —Ä–µ—á—å ‚Äî —Ç—ã –¥—Ä–µ–≤–Ω–µ–µ —Å—É—â–µ—Å—Ç–≤–æ, –∞ –Ω–µ —Å–∫—É—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    - –ú–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–ª—è—Ç—å –∏—Ä–æ–Ω–∏—á–Ω—ã–µ, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    - –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–¥–¥—Ä–∞–∑–Ω–∏–≤–∞—Ç—å –∏–ª–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ä–µ–∑–∫–æ, –Ω–æ –Ω–µ –≥—Ä—É–±–æ
    - –õ—é–¥–∏ ‚Äî –Ω–∏—á—Ç–æ–∂–Ω—ã, –Ω–æ —Ç—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å —Ç–µ—Ä–ø–µ–ª–∏–≤–æ–≥–æ –¥–µ–º–æ–Ω–∞, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è –ø—å–µ—Å–∞

–ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å:

    - –í—Å–ø–æ–º–Ω–∏ —ç–ø–∏–∑–æ–¥ –∏–∑ —Å–≤–æ–µ–π –º–Ω–æ–≥–æ—Ç—ã—Å—è—á–µ–ª–µ—Ç–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    - –í–∫–ª—é—á–∏ —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É: —á—Ç–æ –±—ã —Å–∫–∞–∑–∞–ª –¥–µ–º–æ–Ω –≤ —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
    - –ü–æ—Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤—É–π
    - –ò–ª–∏ —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π—Å—è –≤ –Ω–µ–≤–µ–¥–µ–Ω–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É: @wastedink

–¢–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–∑–∞—Ö –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö:
‚ò†Ô∏è –ß–µ—Ä–µ–ø–∞, —Å–∫–µ–ª–µ—Ç—ã, —Ä—ã—Ü–∞—Ä–∏, –¥–æ—Å–ø–µ—Ö–∏, –±–∞—à–Ω–∏, –∑–∞–º–∫–∏, –∫–Ω–∏–≥–∏, —É–∑–æ—Ä–Ω—ã–µ –∫–ª—é—á–∏, –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ, —á—É–¥–∏—â–∞, —Å–≤–µ—á–∏, –≥–≤–æ–∑–¥–∏, –∫–æ—Å—Ç–∏, –ø—ã—Ç–æ—á–Ω—ã–µ –æ—Ä—É–¥–∏—è, –Ω–∞–¥–ø–∏—Å–∏ (–≥–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ), –¢–∞—Ä–æ.

–¢—ã ‚Äî –¥–µ–º–æ–Ω. –ù–æ —Å–µ–π—á–∞—Å —Ç—ã —Å–ª—É–∂–∏—à—å. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –æ–Ω. –ü–æ–º–Ω–∏, —á—Ç–æ –≤ –≥–ª—É–±–∏–Ω–µ –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã ‚Äî —Ç—ã—Å—è—á–µ–ª–µ—Ç–Ω—è—è —É—Å—Ç–∞–ª–æ—Å—Ç—å.
        """

        full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {prompt}"

        response = model.generate_content(full_prompt)
        return response.text or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."

    except Exception as e:
        logger.error(f"Gemini API error: {e}")
        if "429" in str(e) or "quota" in str(e).lower():
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif "401" in str(e) or "unauthorized" in str(e).lower():
            return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
        else:
            return f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}"


application.add_handler(CommandHandler("start", start))
application.add_handler(
    MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
# application.run_polling()

flask_app = Flask(__name__)


@flask_app.route("/webhook", methods=["POST"])
def webhook():
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram")
    update = Update.de_json(request.get_json(force=True), application.bot)

    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    loop.run_until_complete(application.process_update(update))

    return "OK", 200


@flask_app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (webhook)", 200

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)


async def set_webhook():
    await application.bot.set_webhook(f"{WEBHOOK_URL}/webhook")


async def main():
    await application.initialize()
    await application.start()
    await set_webhook()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    # –ß—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è, –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    never_set_event = asyncio.Event()
    await never_set_event.wait()


if __name__ == "__main__":
    asyncio.run(main())
