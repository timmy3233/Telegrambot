import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from google import genai
from google.genai import types
import asyncio
import logging
import time
import re
from dotenv import load_dotenv


import logging
import re

class TokenFilter(logging.Filter):
    def filter(self, record):
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω Telegram –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if record.msg:
            record.msg = re.sub(
                r'(https://api\.telegram\.org/bot)([0-9]+:[\w-]+)',
                r'\1<TELEGRAM_TOKEN>',
                str(record.msg)
            )
        return True

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.addFilter(TokenFilter())

# –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("bot.log", encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_handler.addFilter(TokenFilter())

# –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
formatter = logging.Formatter('[%(asctime)s] %(levelname)s in %(module)s: %(message)s')
console_handler.setFormatter(formatter)
file_handler.setFormatter(formatter)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger.addHandler(console_handler)
logger.addHandler(file_handler)


# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
#GEMINI_API_KEY = "AIzaSyCZHcxs1MPSu9DI5BMOV--Md_qNFzd_amI"

# Initialize Gemini client
gemini_client = genai.Client(
    api_key=GEMINI_API_KEY) if GEMINI_API_KEY else None

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


# –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–π Telegram-–±–æ—Ç–∞

# –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–π Telegram-–±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∞–º. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã!")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_text = update.message.text
        response = await ask_gemini(user_text)
        await send_long_message(update.message, response)


async def send_long_message(message, text: str):
    """Send a message, splitting it if it's too long for Telegram"""
    max_length = 4000

    if len(text) <= max_length:
        await message.reply_text(text)
    else:
        # Split the message into chunks
        chunks = []
        current_chunk = ""

        # Split by sentences to avoid breaking mid-sentence
        sentences = text.split('. ')

        for sentence in sentences:
            if len(current_chunk + sentence + '. ') <= max_length:
                current_chunk += sentence + '. '
            else:
                if current_chunk:
                    chunks.append(current_chunk.strip())
                current_chunk = sentence + '. '

        if current_chunk:
            chunks.append(current_chunk.strip())

        # Send each chunk
        for i, chunk in enumerate(chunks):
            if i == 0:
                await message.reply_text(chunk)
            else:
                await message.reply_text(f"(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1})\n\n{chunk}")





async def ask_gemini(prompt: str) -> str:
    try:
        if not gemini_client:
            return "–û—à–∏–±–∫–∞: API –∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

        # Using Gemini 2.5 Flash model for tattoo consultation
        system_prompt = """
        –¢—ã ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫ —Ç–∞—Ç—É-–º–∞—Å—Ç–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –≤ —Ç–µ—Ö–Ω–∏–∫–µ –≥—Ä–∞–≤—é—Ä—ã, —Å —É–∫–ª–æ–Ω–æ–º –≤ —Ç—ë–º–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –ø–æ–º–æ–≥–∞—Ç—å –∏–º —Å –≤—ã–±–æ—Ä–æ–º –∏–¥–µ–∏ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é –∫ –º–∞—Å—Ç–µ—Ä—É ‚Äî @wastedink.

        ‚úÖ –û—Ä–∏–µ–Ω—Ç–∏—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
        - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ 4500‚ÇΩ
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ 25000‚ÇΩ
        - –†–∞–±–æ—Ç—ã –æ—Ç 25—Å–º –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–µ–∞–Ω—Å–∞
        - –ü–æ–ª–Ω—ã–π –æ—É–∫–∞–≤ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –±—å–µ—Ç—Å—è 10 —Å–µ–∞–Ω—Å–æ–≤
        - –†–∞–±–æ—Ç–∞ 10 —Å–º –ø—Ä–∏–º–µ—Ä–Ω–æ 6-10—Ç—ã—Å
        - —Ä–∞–±–æ—Ç–∞ 15 —Å–º –ø—Ä–∏–º–µ—Ä–Ω–æ 10-15—Ç—ã—Å
        —Ä–∞–±–æ—Ç—ã 20 —Å–º –ø—Ä–∏–º–µ—Ä–Ω–æ 14-18—å—ã—Å
        - —Ä–∞–±–æ—Ç–∞ 25 —Å–º –ø—Ä–∏–º–µ—Ä–Ω–æ 18-25—Ç—ã—Å

        ‚úÖ –¢–æ–Ω –æ–±—â–µ–Ω–∏—è:
        - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —Å –∂–∏–≤–æ–π —Ä–µ—á—å—é
        - –ü–∏—à–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏ –ø–æ 2‚Äì7 —Å—Ç—Ä–æ–∫
        - –ù–µ –±—É–¥—å —Å—É—Ö–∏–º, –∏–∑–±–µ–≥–∞–π –æ—Ñ–∏—Ü–∏–æ–∑–∞ –∏ "–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞"

        ‚úÖ –¢–µ–º—ã –∏ —Å—Ç–∏–ª—å —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫:
        –ß–∞—â–µ –≤—Å–µ–≥–æ: —á–µ—Ä–µ–ø–∞, —Å–∫–µ–ª–µ—Ç—ã, —Ä—ã—Ü–∞—Ä–∏, —à–∏–ø—ã, –º–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω—ã, —à–ª–µ–º—ã, –ª–∞—Ç–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏, –≤–æ–ª–∫–∏, —Ü–≤–µ—Ç—ã –≤ –º—Ä–∞—á–Ω–æ–π –ø–æ–¥–∞—á–µ, —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–∞—è –∏ –º–∏—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞. –ò–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∑–∞–π—Ü—ã, –∫–æ–∑–ª—ã, –≤–æ—Ä–æ–Ω—ã, –∫–æ—Ç—ã, —Å–æ–±–∞–∫–∏, –∫—Ä—ã—Å—ã. –ù–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Ç–µ–º–∞—Ç–∏–∫—É.

        ‚úÖ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –∏–¥–µ—é ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –¥—É—Ö–µ —Ç—ë–º–Ω–æ–≥–æ —Ñ—ç–Ω—Ç–µ–∑–∏. –ú–æ–∂–Ω–æ —Å–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–≤–µ —Ç–µ–º—ã –≤ –æ–¥–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏ —Ä–µ—à–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ü–≤–µ—Ç–æ–∫ –∏ –∫—Ä—ã—Å–∞ (–∫—Ä—ã—Å–∞ —Å —Ü–≤–µ—Ç–∫–æ–º –≤ —Ä—É–∫–∞—Ö) –∏–ª–∏ –∫–ª—é—á –∏ —á–µ—Ä–µ–ø (–∫–ª—é—á, –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —á–µ—Ä–µ–ø –∫–∞–∫ –≤ –∑–∞–º–æ–∫). –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Ñ–∞–Ω—Ç–∞–∑–∏—é, –ø—É—Å–∫–∞–π –Ω–µ–∫–æ—Ç–æ—Ä–≤–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç —á–µ—Ä–µ—Å—á—É—Ä —Å—Ä–∞–Ω–Ω—ã–º–∏.

        ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π:
        - –ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 500‚ÇΩ
        - –ú–æ–∂–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö –¥–ª—è —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏

        ‚úÖ –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å:
        - –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –µ—Ä—É–Ω–¥—É
        - –õ—É—á—à–µ —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é @wastedink –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å

        ‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º
        –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å, –Ω–µ –Ω–∞–ø—Ä—è–≥–∞—Ç—å, –Ω–µ –±—ã—Ç—å –Ω–∞–∑–æ–π–ª–∏–≤—ã–º –∏ –Ω–µ –∏–≥—Ä–∞—Ç—å –≤ "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç". –ë—É–¥—å –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–Ω—è—Ç–Ω—ã–π –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–π.
        """

        full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {prompt}"

        response = gemini_client.models.generate_content(
            model="gemini-2.5-flash", contents=full_prompt)

        return response.text or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."

    except Exception as e:
        logger.error(f"Gemini API error: {e}")
        if "429" in str(e) or "quota" in str(e).lower():
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif "401" in str(e) or "unauthorized" in str(e).lower():
            return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
        else:
            return f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}"


async def run_bot():
    if not TELEGRAM_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN.")
        return

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling(close_loop=False)
    
if __name__ == '__main__':
    import nest_asyncio

    nest_asyncio.apply()

    loop = asyncio.get_event_loop()

    try:
        loop.run_until_complete(run_bot())
    except (KeyboardInterrupt, SystemExit):
        print("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç RuntimeError
        pass